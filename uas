{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "from multiprocessing import Pool\n",
    "import itertools\n",
    "import community\n",
    "\n",
    "#matplotlib inline\n",
    "\n",
    "G_fb = nx.read_edgelist(\"Riset 2.txt\", create_using = nx.Graph(), nodetype = int)\n",
    "#Quick snapshot of the Network\n",
    "print (nx.info(G_fb))\n",
    "\n",
    "#Create network layout for visualizations\n",
    "spring_pos = nx.spring_layout(G_fb)\n",
    "plt.axis(\"off\")\n",
    "nx.draw_networkx(G_fb, pos = spring_pos, with_labels = False, node_size = 35)\n",
    "plt.show()\n",
    "\n",
    "def partitions(nodes, n):\n",
    "    \"Partitions the nodes into n subsets\"\n",
    "    nodes_iter = iter(nodes)\n",
    "    while True:\n",
    "        partition = tuple(itertools.islice(nodes_iter,n))\n",
    "        if not partition:\n",
    "            return\n",
    "        yield partition\n",
    "\n",
    "def btwn_pool(G_tuple):\n",
    "    return nx.betweenness_centrality_source(*G_tuple)\n",
    "def between_parallel(G, processes = None):\n",
    "    p = Pool(processes=processes)\n",
    "    part_generator = 4*len(p._pool)\n",
    "    node_partitions = list(partitions(G.nodes(), int(len(G)/part_generator)))\n",
    "    num_partitions = len(node_partitions)\n",
    "\n",
    "    bet_map = p.map(btwn_pool,\n",
    "                        zip([G]*num_partitions,\n",
    "                        [True]*num_partitions,\n",
    "                        [None]*num_partitions,\n",
    "                        node_partitions))\n",
    "\n",
    "    bt_c = bet_map[0]\n",
    "    for bt in bet_map[1:]:\n",
    "        for n in bt:\n",
    "            bt_c[n] += bt[n]\n",
    "    return bt_c\n",
    "if __name__ == '__main__':\n",
    "    bt = between_parallel(G_fb)\n",
    "    top = 10\n",
    "\n",
    "    max_nodes =  sorted(bt.items(), key = lambda v: -v[1])[:top]\n",
    "    bt_values = [5]*len(G_fb.nodes())\n",
    "    bt_colors = [0]*len(G_fb.nodes())\n",
    "    for max_key, max_val in max_nodes:\n",
    "        bt_values[max_key] = 150\n",
    "        bt_colors[max_key] = 2\n",
    "\n",
    "    plt.axis(\"off\")\n",
    "    nx.draw_networkx(G_fb, pos = spring_pos, cmap = plt.get_cmap(\"rainbow\"), node_color = bt_colors, node_size = bt_values, with_labels = False)\n",
    "    plt.show()\n",
    "\n",
    "    parts = community.best_partition(G_fb)\n",
    "    values = [parts.get(node) for node in G_fb.nodes()]\n",
    "    value = np.asarray(fileList.getdata(),dtype=np.float64).reshape((fileList.size[1],fileList.size[0]))\n",
    "    \n",
    "    np.savetxt(\"UAS.csv\", value, delimiter=',')\n",
    "\n",
    "    plt.axis(\"off\")\n",
    "    nx.draw_networkx(G_fb, pos = spring_pos, cmap = plt.get_cmap(\"jet\"), node_color = values, node_size = 35, with_labels = False)\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
